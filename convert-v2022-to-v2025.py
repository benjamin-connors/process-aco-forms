import pandas as pd
import os

# Load the first line to check for 'sep=' declaration
input_file_path = 'C:/Users/oconnorb/projects/process-aco-forms/test_data/Mar2025/ACO Snow Survey Plot 2022_v3.csv'  # Replace with your actual input file path

# Open the file and check for the 'sep=' line
with open(input_file_path, 'r') as file:
    first_line = file.readline().strip()

# Check if the first line contains a separator declaration
if first_line.startswith('sep='):
    separator = first_line.split('=')[1].strip()  # Extract the separator from the first line
    v2022_df = pd.read_csv(input_file_path, sep=separator, skiprows=1)  # Skip the first line
else:
    separator = ','  # Default separator
    v2022_df = pd.read_csv(input_file_path, sep=separator)  # Read the CSV normally

# List of all v2025 headers in the correct order
v2025_headers = [
    'Submitting Device', 'Device User', 'Form Completed', 'Upload Completed', 'Submission ID', 
    'Submission ID generated by device', 'Survey Start Time', 'Study Area', 'Other Study Area', 'User(s)', 
    'Plot ID', 'Tube Name', 'Pre Survey Notes', 'GNSS Used?', 'GNSS Setup', 'Other GNSS Setup', 
    'GNSS Status', 'GNSS Height Rover to Snow (cm)', 'Tare Weight (g)', 'Tare Weight (cm)', 'Sampling Design', 
    'Type of Plot', 'Point Observation : Cardinal Direction', 'Point Observation : Other Direction (°)',
    'Point Observation : Distance From Centre (m)', 
    'Point Observation : Custom Distance From Centre (m)', 'Point Observation : Sample Type', 
    'Point Observation : Depth (cm)', 'Point Observation : Depth (cm) : timestamp', 
    'Point Observation : Number of probe extensions used?', 'Point Observation : Depth Final (cm)', 
    'Point Observation : Core Length (cm)', 'Point Observation : Plug (cm)', 
    'Point Observation : Mass + Tube (cm SWE)', 'Point Observation : Mass + Tube (g)', 
    'Point Observation : Multi-Part Core?', 'Point Observation : Multi-Part Core Section Number', 
    'Point Observation : Additional Measurements : Multi-Part Core Section Number Copy', 
    'Point Observation : Additional Measurements : New Depth (cm)', 
    'Point Observation : Additional Measurements : New Depth (cm) : timestamp', 
    'Point Observation : Additional Measurements : Core Section Length (cm)', 
    'Point Observation : Additional Measurements : Plug?', 
    'Point Observation : Additional Measurements : Mass + Tube',
    'Point Observation : Additional Measurements : Mass + Tube (swescale)',
    'Point Observation : Core Length Final (cm)', 'Point Observation : Plot Features', 
    'Point Observation : Abbreviations', 'Point Observation : Core Features', 
    'Point Observation : Depth of Saturation', 'Point Observation : Mass Final (g)', 
    'Point Observation : SWE Final (cm)', 'Point Observation : Depth Max', 'Point Observation : Retrieval (%)', 
    'Point Observation : SWE (cm)', 'Point Observation : Density', 'Point Observation : Density', 
    'Point Observation : Sample Rating', 
    'Point Observation : Point Observation Notes', 'Point Observation : Picture', 
    'Snow Pit Measurement : Distance from centre of plot (m)', 'Snow Pit Measurement : Depth above ground (cm)', 
    'Snow Pit Measurement : Temperature (°C)', 'Snow Pit Measurement : Density Notes', 'Survey End TIme'
]

# Add missing columns to v2022_df
for header in v2025_headers:
    if header not in v2022_df.columns:
        v2022_df[header] = ''

# Check for any unused columns in v2022 (columns that don't map to v2025)
unused_columns = [col for col in v2022_df.columns if col not in v2025_headers]
if unused_columns:
    print(f"Warning: The following columns from v2022 were not mapped to v2025 and will be unused:")
    print(unused_columns)

# Reorder columns to match the v2025 header order
v2022_df = v2022_df[v2025_headers]

# Generate the output path (same folder, same filename with '_converted' appended)
output_folder = os.path.dirname(input_file_path)
output_filename = os.path.splitext(os.path.basename(input_file_path))[0] + '_converted.csv'
output_file_path = os.path.join(output_folder, output_filename)

# Save the updated DataFrame to the new output path
v2022_df.to_csv(output_file_path, index=False)

print(f"File saved to: {output_file_path}")
